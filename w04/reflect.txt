/*/////////////////////////////////////////////////////////////////////////
Reflection
Workshop - #4
Full Name  : Anna Francesca Dela Cruz
Student ID#: 123123150
Email      : afgdela-cruz@myseneca.ca
Section    : NJJ


Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
/////////////////////////////////////////////////////////////////////////*/


1. With the completion of this workshop, you must have begun to appreciate why code formatting is important. Explain how you made your code–especially the iteration and selection logic parts–easy to read and maintain.


To make my code easy to read and maintain, I start with selecting appropriate identifiers/variables. I try to make variable names self-descriptive, nouns, and short. I also always use camelCase for easier reading.


Another method I utilize is using tabs for indentation. This helps define where a code block ends and starts, such as if/else and loop blocks. This is especially helpful during nesting.


Braces/brackets also help with defining code blocks. Even when they’re not necessary when using single statements in if/else statements, I use them regardless because it makes my code more clear.


2. Nested logic is an important feature of programming in any language. Identify and briefly discuss the biggest impact on how this workshop could be coded if nesting were not possible.


Because I used arrays for this workshop, I did not implement too many nested if/else statements and loops. However, from lines 75 to 86, I used a nested if/else statement to determine whether fruitCart was empty. If it was, picking for the fruit was done; If not, picking more fruit was needed. This if/else statement was inside another if/else statement that determined if the number of picked fruit was greater than zero, but less than the required quantity. If so, the if/else statement inside of it would run.


If nesting was not possible for this workshop, I’d use more logical expressions. For example, I would write “fruitPicked > 0 && fruitPicked < fruitQty[j] && fruitCart != 0” for one of the conditions in an if/else statement instead of breaking it down into multiple conditions.


3. Consider the following scenario: you are programming logic that requires a user to input a value between 1 and 5, and for each value within that range, you had to perform something unique. You would have to apply selection to validate the entered values so you can implement the given logic for a specific entered range value.  Explain why is it inefficient to achieve this using a series of “if”optional path constructs instead of the preferred “if/else if...”alternative path logic?


It is inefficient to use a series of “if” optional paths because we would have to nest them. In certain situations, nesting is necessary, but after the third or fourth level, nested if/else blocks can be difficult to read. It’s better to use if/else paths because we can avoid nesting (when possible).