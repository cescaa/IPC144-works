/*/////////////////////////////////////////////////////////////////////////
                          Reflection
                          Workshop - #3 (P2)
Full Name  : Anna Francesca Dela Cruz
Student ID#: 123123150
Email      : afgdela-cruz@myseneca.ca
Section    : NJJ


Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
/////////////////////////////////////////////////////////////////////////*/


1. Determining the customer preference based on the number of servings to the available coffee bag weights required a more complex logical expression.  Copy your submitted code for only this part of the logic, and explain the following:


servInput >= 1 && servInput <= 4
servInput >= 5 && servInput <= 9
servInput >= 10


   1. How many relational expressions did you use and identify each of them.
I used 5 relational expressions (using >= and <= operators):
servInput >= 1
servInput <= 4
servInput >= 5
servInput <= 9
servInput >= 10


   2. How many logical expressions did you use and identify each of them.
I used 2 logical expressions (using && operator):
servInput >= 1 && servInput <= 4
servInput >= 5 && servInput <= 9


2. Referring to Part-1 output #9, show how that logic can be coded in TWO correct ways, one applying DeMorgan’s Law and the other way not using DeMorgan’s Law. Also, identify what method you used in your submitted answer for Part-1.


EXPRESSION ONE:
proId3 == proId2 && proId3 == proId1


EXPRESSION TWO:
!(proId3 != proId2 || proId3 != proId1)


I applied DeMorgan’s Law for the second expression by reversing the conditions in the first expression. I used the first expression in Part-1.




3. Using the variables you used in Part-2,demonstrate two ways you can organize them, so it is optimized for easy to maintain code and contributes towards clarity in how data is stored in the program.
        
        WAY ONE:
        const double GRAMS_IN_LBS = 453.5924;


  // product data
  char light, medium, rich, yesCream, noCream;
  int w250, w500, w1000;


  // user inputs
  char typeInput, creamInput;
  int servInput;


WAY TWO:
const double GRAMS_IN_LBS = 453.5924;


  // characters
  char light, medium, rich, yesCream, noCream, typeInput, creamInput;


  // integers
  int w250, w500, w1000, servInput;


In WAY ONE, I organized the variables by source of data: One group for product data and other, user data. In WAY TWO, I organized by type of data: a group for chars, and the other, for integers.