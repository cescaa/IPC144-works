/*/////////////////////////////////////////////////////////////////////////
Reflection
Workshop - #5
Full Name  : Anna Francesca Dela Cruz
Student ID#: 123123150
Email      : afgdela-cruz@myseneca.ca
Section    : NJJ


Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
/////////////////////////////////////////////////////////////////////////*/


1. Why do we try to use variables and macros to represent information rather than hardcode “magic” numbers (constant literals)?  Using the details of this workshop, describe at least three advantages this provides us?
            
One reason we should use variables and macros instead of hard code “magic” numbers is because it makes it easier to read the code, especially if multiple people are working on the file. Storing numbers in variables and macros allows you and your co-developers to better understand the numbers' meaning and purpose.


The second reason is it makes editing/debugging easier and faster. Because the number is stored in a single place, the developer only needs to edit in one place, not multiple places where the “magic” number may have appeared.


The third reason is because variables and macros make editing easier and faster, developers are less likely to create bugs. For example, if they were to use “magic” numbers and needed to change them in multiple places, it is possible the developer may forget or miss some spots. 


2. The rating values entered by the user required iteration to perform basic validations with each iteration concentrated on testing for values to be within a range.  Why do we not include additional logic that sums and performs the average? Instead, the sum and average logic is placed outside of any validation routine. Briefly explain two reasons why this is better design and refer to the details of this workshop to justify your answer.


It is better to place the sum and average logic outside the validation routine because not all the values the user may enter will be valid so it does not make sense to include them in the sum and average. Secondly, having separate sections for validation and for sum/average makes reading and understanding the code easier in the future (if needed), especially if there are two separate comments for each section.